{"version":3,"sources":["store/contacts/action-types.js","services/apiService.js","store/contacts/actions.js","store/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","store/contacts/reducer.js","store/store.js","index.js"],"names":["ActionType","fetchContacts","a","axios","get","data","deleteContact","id","delete","insertContact","contact","post","defaults","baseURL","changeFilter","createAction","getContacts","createAsyncThunk","_","rejectWithValue","contacts","removeContact","addContact","payload","getFilter","state","filter","getVisibleContacts","items","name","toLowerCase","includes","FormWrapper","styled","form","ContactForm","useState","setName","number","setNumber","nameId","shortid","generate","numberId","dispatch","useDispatch","useSelector","handleInputChange","event","target","value","Error","reset","onSubmit","preventDefault","findIndex","toast","Form","Label","htmlFor","Control","type","pattern","title","required","onChange","Button","variant","Item","li","ContactListItem","onDelete","href","phone","onClick","List","ul","ContactList","useCallback","map","label","Filter","filterId","placeholder","App","useEffect","className","length","Alert","createReducer","fulfilled","action","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.789a8ad0.chunk.js","sourcesContent":["const ActionType = {\n    ADD_CONTACT: 'contacts/add',\n    GET_CONTACTS: 'contacts/get',\n    DELETE_CONTACT: 'contacts/delete',\n    CHANGE_FILTER: 'contacts/changeFilter',\n};\n\nexport { ActionType };\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://61eb12c27ec58900177cdb91.mockapi.io';\n\nexport async function fetchContacts() {\n    const { data } = await axios.get(`/contacts`);\n    return data;\n}\n\nexport async function deleteContact(id) {\n    const { data } = await axios.delete(`/contacts/${id}`);\n    return data;\n}\n\nexport async function insertContact(contact) {\n    const { data } = await axios.post(`/contacts`, contact);\n    return data;\n}\n","import { createAsyncThunk, createAction } from '@reduxjs/toolkit';\nimport { ActionType } from './action-types';\n\nimport {\n    fetchContacts,\n    deleteContact,\n    insertContact,\n} from '../../services/apiService';\n\nexport const changeFilter = createAction(ActionType.CHANGE_FILTER);\n\nexport const getContacts = createAsyncThunk(\n    ActionType.GET_CONTACTS,\n    async (_, { rejectWithValue }) => {\n        try {\n            const contacts = await fetchContacts();\n            return contacts;\n        } catch (error) {\n            return rejectWithValue(error);\n        }\n    },\n);\n\nexport const removeContact = createAsyncThunk(\n    ActionType.DELETE_CONTACT,\n    async (id, { rejectWithValue }) => {\n        try {\n            const contacts = await deleteContact(id);\n            return contacts;\n        } catch (error) {\n            return rejectWithValue(error);\n        }\n    },\n);\n\nexport const addContact = createAsyncThunk(\n    ActionType.ADD_CONTACT,\n    async (payload, { rejectWithValue }) => {\n        try {\n            const contact = await insertContact(payload);\n            return contact;\n        } catch (error) {\n            return rejectWithValue(error);\n        }\n    },\n);\n","export const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n    const contacts = getContacts(state);\r\n    const filter = getFilter(state);\r\n    return contacts.filter(({ name }) => name.toLowerCase().includes(filter));\r\n};\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport shortid from 'shortid';\r\nimport { Button, Form } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport { addContact } from '../../store/contacts/actions';\r\nimport { getVisibleContacts } from '../../store/contacts/selectors';\r\n\r\nconst FormWrapper = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    max-width: 400px;\r\n    width: 100%;\r\n    margin: 0 auto 20px;\r\n`;\r\n\r\nexport default function ContactForm() {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n\r\n    const nameId = shortid.generate();\r\n    const numberId = shortid.generate();\r\n    const dispatch = useDispatch();\r\n    const contacts = useSelector(getVisibleContacts);\r\n\r\n    const handleInputChange = event => {\r\n        const { value, name } = event.target;\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                throw new Error(`Unknown input ${name}`);\r\n        }\r\n    };\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        const idx = contacts.findIndex(\r\n            contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n        );\r\n        if (idx !== -1) {\r\n            toast(`${name} is already in contacts`);\r\n            return;\r\n        }\r\n        dispatch(addContact({ name, number }));\r\n        reset();\r\n    };\r\n\r\n    const reset = () => {\r\n        setName('');\r\n        setNumber('');\r\n    };\r\n    return (\r\n        <FormWrapper onSubmit={handleSubmit}>\r\n            <Form.Label htmlFor={nameId}>\r\n                Name\r\n                <Form.Control\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n                    required\r\n                    value={name}\r\n                    onChange={handleInputChange}\r\n                    id={nameId}\r\n                />\r\n            </Form.Label>\r\n            <Form.Label htmlFor={numberId}>\r\n                Number\r\n                <Form.Control\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n                    required\r\n                    value={number}\r\n                    onChange={handleInputChange}\r\n                    id={numberId}\r\n                />\r\n            </Form.Label>\r\n            <Button variant=\"outline-dark\" type=\"sumbit\">\r\n                Add contact\r\n            </Button>\r\n        </FormWrapper>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from 'react-bootstrap/Button';\r\nimport styled from 'styled-components';\r\n\r\nconst Item = styled.li`\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nexport default function ContactListItem({ contact, onDelete }) {\r\n    return (\r\n        <Item>\r\n            <p>{contact.name}</p>\r\n            <a href={'tel:' + contact.phone}>{contact.phone}</a>\r\n            <Button\r\n                variant=\"outline-dark\"\r\n                type=\"button\"\r\n                onClick={() => {\r\n                    onDelete(contact.id);\r\n                }}\r\n            >\r\n                Delete\r\n            </Button>\r\n        </Item>\r\n    );\r\n}\r\nContactListItem.propTypes = {\r\n    contact: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        phone: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n    onDelete: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useCallback } from 'react';\r\nimport ContactListItem from '../ContactListItem/';\r\nimport styled from 'styled-components';\r\n\r\nimport { removeContact } from '../../store/contacts/actions';\r\n\r\nconst List = styled.ul`\r\n    margin-top: 20px;\r\n`;\r\n\r\nexport default function ContactList({ contacts }) {\r\n    const dispatch = useDispatch();\r\n\r\n    const onDelete = useCallback(id => dispatch(removeContact(id)), [dispatch]);\r\n\r\n    return (\r\n        <List>\r\n            {contacts.map(contact => (\r\n                <ContactListItem\r\n                    key={contact.id}\r\n                    contact={contact}\r\n                    onDelete={onDelete}\r\n                />\r\n            ))}\r\n        </List>\r\n    );\r\n}\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            phone: PropTypes.string.isRequired,\r\n        }).isRequired,\r\n    ).isRequired,\r\n};\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\nimport styled from 'styled-components';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nimport { changeFilter } from '../../store/contacts/actions';\r\nimport { getFilter } from '../../store/contacts/selectors';\r\n\r\nconst Label = styled.label`\r\n    display: flex;\r\n    flex-direction: column;\r\n    max-width: 400px;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport default function Filter({ title }) {\r\n    const dispatch = useDispatch();\r\n    const filter = useSelector(getFilter);\r\n\r\n    const onChange = value => dispatch(changeFilter(value));\r\n\r\n    const handleFilterChange = event => {\r\n        const { value } = event.target;\r\n        onChange(value.toLowerCase());\r\n    };\r\n\r\n    const filterId = shortid.generate();\r\n    return (\r\n        <Label htmlFor={filterId}>\r\n            <span>{title}</span>\r\n            <Form.Control\r\n                type=\"text\"\r\n                name=\"filter\"\r\n                required\r\n                value={filter}\r\n                onChange={handleFilterChange}\r\n                placeholder=\"Search...\"\r\n                id={filterId}\r\n            />\r\n        </Label>\r\n    );\r\n}\r\nFilter.propTypes = {\r\n    title: PropTypes.string,\r\n};\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { useEffect } from 'react';\r\n\r\nimport './App.css';\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactList from './components/ContactList';\r\nimport Filter from './components/Filter/';\r\nimport { getVisibleContacts } from './store/contacts/selectors';\r\nimport { getContacts } from './store/contacts/actions';\r\n\r\nexport default function App() {\r\n    const contacts = useSelector(getVisibleContacts);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => dispatch(getContacts()), [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Phonebook</h1>\r\n            <ContactForm />\r\n            <h2>Contacts</h2>\r\n            <Filter title={'Find contacts by name'} />\r\n            {contacts.length ? (\r\n                <ContactList contacts={contacts} />\r\n            ) : (\r\n                <Alert className=\"Alert\" variant=\"dark\">\r\n                    Nothing found\r\n                </Alert>\r\n            )}\r\n            <ToastContainer />\r\n        </div>\r\n    );\r\n}\r\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\nimport {\n    getContacts,\n    removeContact,\n    changeFilter,\n    addContact,\n} from './actions';\n\nconst filter = createReducer('', {\n    [changeFilter]: (_, { payload }) => payload,\n});\n\nconst items = createReducer([], {\n    [getContacts.fulfilled]: (_, action) => action.payload,\n    [removeContact.fulfilled]: (state, { payload }) => {\n        const { id } = payload;\n        return state.filter(contact => contact.id !== id);\n    },\n    [addContact.fulfilled]: (state, { payload }) => {\n        const newState = [...state, payload];\n        return newState;\n    },\n});\n\nexport default combineReducers({ items, filter });\n","import { configureStore } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/reducer';\n\nexport const store = configureStore({\n    reducer: {\n        contacts: contactsReducer,\n    },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './store/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}